# Default values for backstage.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

frontend:
  enabled: true
  replicaCount: 1
  image:
    repository: ghcr.io/projectkerberus/kerberus-dashboard-frontend
    tag: v0.2.0
    pullPolicy: IfNotPresent
  containerPort: 8080
  resources:
    requests:
      memory: 128Mi
    limits:
      memory: 256Mi

backend:
  enabled: true
  nodeEnv: development
  demoData: false
  replicaCount: 1
  image:
    repository: ghcr.io/projectkerberus/kerberus-dashboard-backend
    tag: v0.2.0
    pullPolicy: IfNotPresent
  containerPort: 7000
  serviceType: ClusterIP
  postgresCertMountEnabled: true
  resources:
    requests:
      memory: 512Mi
    limits:
      memory: 1024Mi

lighthouse:
  enabled: true
  replicaCount: 1
  image:
    repository: roadiehq/lighthouse-audit-service
    tag: latest
    pullPolicy: IfNotPresent
  containerPort: 3003
  serviceType: ClusterIP
  postgresCertMountEnabled: true
  resources:
    requests:
      memory: 128Mi
    limits:
      memory: 256Mi
  database:
    connection:
      port:
      host:
      user:
      password:
      database: lighthouse_audit_service
    pathToDatabaseCa:

nameOverride: ''
fullnameOverride: ''

ingress:
  annotations:
    kubernetes.io/ingress.class: nginx

issuer:
  email:
  clusterIssuer: 'letsencrypt-staging'

global:
  postgresql:
    postgresqlUsername: backend-user
    postgresqlPassword: backend-user
    caFilename: ca.crt
  nodeSelector: {}

postgresql:
  enabled: true
  nameOverride: postgresql
  tls:
    enabled: true
    certificatesSecret: kerberus-dashboard-postgresql-certs
    certFilename: tls.crt
    certKeyFilename: tls.key
  volumePermissions:
    securityContext:
      runAsUser: 1001
    enabled: true
  initdbScriptsSecret: kerberus-dashboard-postgresql-initdb

appConfig:
  app:
    baseUrl: https://demo.example.com
    title: Kerberus Dashboard
    googleAnalyticsTrackingId:
    support:
      url: https://demo.example.com/issues # Used by common ErrorPage
      items: # Used by common SupportButton component
        - title: Issues
          icon: github
          links:
            - url: https://demo.example.com/issues
              title: GitHub Issues
  backend:
    baseUrl: https://demo.example.com
    listen:
      port: 7000
    cors:
      origin: https://demo.example.com
    database:
      client: pg
      connection:
        database: backstage_plugin_catalog
        host:
        user:
        port:
        password:
        ssl:
          rejectUnauthorized: false
          ca:
  sentry:
    organization: project-kerberus
  techdocs:
    storageUrl: https://demo.example.com/api/techdocs/static/docs
    requestUrl: https://demo.example.com/api/techdocs
  lighthouse:
    baseUrl: https://demo.example.com/lighthouse-api
  rollbar:
    organization: Project Kerberus

  # Auth config has recently moved into the app config file in upstream Backstage. However,
  # most of this config simply mandates that items like the client id and client secret should
  # be picked up from the environment variables named below. Those environment variables are
  # set in this helm controlled environment by the 'auth' configuration below this section.
  # Thus, the only key in this config which directly controls an app config is the
  # auth.providers.github.development.appOrigin property.
  auth:
    providers:
      google:
        development:
          appOrigin: 'https://kerberus-dashboard.example.com'
          secure: false
          clientId: ${AUTH_GOOGLE_CLIENT_ID}
          clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
      github:
        development:
          appOrigin: 'https://kerberus-dashboard.example.com'
          secure: false
          clientId: ${AUTH_GITHUB_CLIENT_ID}
          clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
          enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
      gitlab:
        development:
          appOrigin: 'https://kerberus-dashboard.example.com'
          secure: false
          clientId: ${AUTH_GITLAB_CLIENT_ID}
          clientSecret: ${AUTH_GITLAB_CLIENT_SECRET}
          audience: ${GITLAB_BASE_URL}
      okta:
        development:
          appOrigin: 'https://kerberus-dashboard.example.com'
          secure: false
          clientId: ${AUTH_OKTA_CLIENT_ID}
          clientSecret: ${AUTH_OKTA_CLIENT_SECRET}
          audience: ${AUTH_OKTA_AUDIENCE}
      oauth2:
        development:
          appOrigin: 'https://kerberus-dashboard.example.com'
          secure: false
          clientId: ${AUTH_OAUTH2_CLIENT_ID}
          clientSecret: ${AUTH_OAUTH2_CLIENT_SECRET}
          authorizationURL: ${AUTH_OAUTH2_AUTH_URL}
          tokenURL: ${AUTH_OAUTH2_TOKEN_URL}
      auth0:
        development:
          clientId: ${AUTH_AUTH0_CLIENT_ID}
          clientSecret: ${AUTH_AUTH0_CLIENT_SECRET}
          domain: ${AUTH_AUTH0_DOMAIN}
      microsoft:
        development:
          clientId: ${AUTH_MICROSOFT_CLIENT_ID}
          clientSecret: ${AUTH_MICROSOFT_CLIENT_SECRET}
          tenantId: ${AUTH_MICROSOFT_TENANT_ID}
  
  proxy:
    '/argocd/api':
      # url to the api of your hosted argoCD instance
      target: https://argocd.example.com
  
  catalog:
    rules:
      - allow:
          - Component
          - API
          - Resource
          - Group
          - User
          - Template
          - System
          - Domain
          - Location

auth:
  google:
    clientId: fake-clientid-google
    clientSecret: fake-clientsecret-google
  github:
    clientId: fake-clientid-github
    clientSecret: fake-clientsecret-github
  gitlab:
    clientId: fake-clientid-gitlab
    clientSecret: fake-clientsecret-gitlab
    baseUrl: fake-baseurl-gitlab
  okta:
    clientId: fake-clientid-okta
    clientSecret: fake-clientsecret-okta
    audience: fake-audience-okta
  oauth2:
    clientId: fake-clientid-oauth2
    clientSecret: fake-clientsecret-oauth2
    authUrl: fake-authurl-oauth2
    tokenUrl: fake-tokenurl-oauth2
  auth0:
    clientId: fake-clientid-auth0
    clientSecret: fake-clientsecret-auth0
    domain: fake-domain-auth0
  microsoft:
    clientId: fake-clientid-microsoft
    clientSecret: ffake-clientsecret-microsoft
    tenantId: fake-tenandid-microsoft
  azure:
    api:
      token: fake-token-azure
  sentryToken: fake-token-sentry
  rollbarAccountToken: fake-rollbaraction-token
  # This is a 'Personal Access Token'
  circleciAuthToken: fake-circleci-auth-token
  # Used by the scaffolder to create GitHub repos. Must have 'repo' scope.
  githubToken: fake-github-token
  gitlabToken: fake-gitlab-token
  newRelicRestApiKey: fake-newrelic-rest-api-key
  travisciAuthToken: fake-travis-ci-auth-token
  pagerdutyToken: fake-pagerduty-token

kubernetes:
  url: https://clusterk8s.example.com:6443
  token: fake-kubernetes-token

argocd:
  baseUrl: https://argocd.example.com
  token: fake-argocd-token